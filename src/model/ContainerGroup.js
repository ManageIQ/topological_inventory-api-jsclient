/**
 * Topological Inventory
 * Topological Inventory
 *
 * OpenAPI spec version: 0.1.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tagging from './Tagging';

/**
 * The ContainerGroup model module.
 * @module model/ContainerGroup
 * @version 0.1.0
 */
class ContainerGroup {
    /**
     * Constructs a new <code>ContainerGroup</code>.
     * @alias module:model/ContainerGroup
     */
    constructor() { 
        
        ContainerGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerGroup} obj Optional instance to populate.
     * @return {module:model/ContainerGroup} The populated <code>ContainerGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerGroup();

            if (data.hasOwnProperty('archived_at')) {
                obj['archived_at'] = ApiClient.convertToType(data['archived_at'], 'Date');
            }
            if (data.hasOwnProperty('container_node_id')) {
                obj['container_node_id'] = ApiClient.convertToType(data['container_node_id'], 'String');
            }
            if (data.hasOwnProperty('container_project_id')) {
                obj['container_project_id'] = ApiClient.convertToType(data['container_project_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ipaddress')) {
                obj['ipaddress'] = ApiClient.convertToType(data['ipaddress'], 'String');
            }
            if (data.hasOwnProperty('last_seen_at')) {
                obj['last_seen_at'] = ApiClient.convertToType(data['last_seen_at'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resource_version')) {
                obj['resource_version'] = ApiClient.convertToType(data['resource_version'], 'String');
            }
            if (data.hasOwnProperty('source_created_at')) {
                obj['source_created_at'] = ApiClient.convertToType(data['source_created_at'], 'Date');
            }
            if (data.hasOwnProperty('source_deleted_at')) {
                obj['source_deleted_at'] = ApiClient.convertToType(data['source_deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'String');
            }
            if (data.hasOwnProperty('source_ref')) {
                obj['source_ref'] = ApiClient.convertToType(data['source_ref'], 'String');
            }
            if (data.hasOwnProperty('taggings')) {
                obj['taggings'] = ApiClient.convertToType(data['taggings'], [Tagging]);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {Date} archived_at
 */
ContainerGroup.prototype['archived_at'] = undefined;

/**
<<<<<<< HEAD
 * ID of the resource
=======
>>>>>>> Update API definition, use v0.1 and resolve ID/IDReadonly problem.
 * @member {String} container_node_id
 */
ContainerGroup.prototype['container_node_id'] = undefined;

/**
<<<<<<< HEAD
 * ID of the resource
=======
>>>>>>> Update API definition, use v0.1 and resolve ID/IDReadonly problem.
 * @member {String} container_project_id
 */
ContainerGroup.prototype['container_project_id'] = undefined;

/**
 * @member {Date} created_at
 */
ContainerGroup.prototype['created_at'] = undefined;

/**
<<<<<<< HEAD
 * ID of the resource
=======
>>>>>>> Update API definition, use v0.1 and resolve ID/IDReadonly problem.
 * @member {String} id
 */
ContainerGroup.prototype['id'] = undefined;

/**
 * @member {String} ipaddress
 */
ContainerGroup.prototype['ipaddress'] = undefined;

/**
 * @member {Date} last_seen_at
 */
ContainerGroup.prototype['last_seen_at'] = undefined;

/**
 * @member {String} name
 */
ContainerGroup.prototype['name'] = undefined;

/**
 * @member {String} resource_version
 */
ContainerGroup.prototype['resource_version'] = undefined;

/**
 * @member {Date} source_created_at
 */
ContainerGroup.prototype['source_created_at'] = undefined;
<<<<<<< HEAD
=======

/**
 * @member {Date} source_deleted_at
 */
ContainerGroup.prototype['source_deleted_at'] = undefined;
>>>>>>> Update API definition, use v0.1 and resolve ID/IDReadonly problem.

/**
 * @member {Date} source_deleted_at
 */
ContainerGroup.prototype['source_deleted_at'] = undefined;

/**
 * ID of the resource
 * @member {String} source_id
 */
ContainerGroup.prototype['source_id'] = undefined;

/**
 * @member {String} source_ref
 */
ContainerGroup.prototype['source_ref'] = undefined;

/**
 * @member {Array.<module:model/Tagging>} taggings
 */
ContainerGroup.prototype['taggings'] = undefined;

/**
 * @member {Date} updated_at
 */
ContainerGroup.prototype['updated_at'] = undefined;






export default ContainerGroup;

