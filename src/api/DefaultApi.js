/**
 * Topological Inventory
 * Topological Inventory
 *
 * OpenAPI spec version: 0.1.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Authentication from '../model/Authentication';
import AuthenticationsCollection from '../model/AuthenticationsCollection';
import Container from '../model/Container';
import ContainerGroup from '../model/ContainerGroup';
import ContainerGroupsCollection from '../model/ContainerGroupsCollection';
import ContainerImage from '../model/ContainerImage';
import ContainerImagesCollection from '../model/ContainerImagesCollection';
import ContainerNode from '../model/ContainerNode';
import ContainerNodesCollection from '../model/ContainerNodesCollection';
import ContainerProject from '../model/ContainerProject';
import ContainerProjectsCollection from '../model/ContainerProjectsCollection';
import ContainerTemplate from '../model/ContainerTemplate';
import ContainerTemplatesCollection from '../model/ContainerTemplatesCollection';
import ContainersCollection from '../model/ContainersCollection';
import Endpoint from '../model/Endpoint';
import EndpointsCollection from '../model/EndpointsCollection';
import Flavor from '../model/Flavor';
import FlavorsCollection from '../model/FlavorsCollection';
import InlineResponse200 from '../model/InlineResponse200';
import OrchestrationStack from '../model/OrchestrationStack';
import OrchestrationStacksCollection from '../model/OrchestrationStacksCollection';
import OrderParameters from '../model/OrderParameters';
import ServiceInstance from '../model/ServiceInstance';
import ServiceInstancesCollection from '../model/ServiceInstancesCollection';
import ServiceOffering from '../model/ServiceOffering';
import ServiceOfferingIcon from '../model/ServiceOfferingIcon';
import ServiceOfferingsCollection from '../model/ServiceOfferingsCollection';
import ServicePlan from '../model/ServicePlan';
import ServicePlansCollection from '../model/ServicePlansCollection';
import Source from '../model/Source';
import SourceType from '../model/SourceType';
import SourceTypesCollection from '../model/SourceTypesCollection';
import SourcesCollection from '../model/SourcesCollection';
import Tag from '../model/Tag';
import TagsCollection from '../model/TagsCollection';
import Task from '../model/Task';
import TasksCollection from '../model/TasksCollection';
import Vm from '../model/Vm';
import VmsCollection from '../model/VmsCollection';
import Volume from '../model/Volume';
import VolumeAttachment from '../model/VolumeAttachment';
import VolumeAttachmentsCollection from '../model/VolumeAttachmentsCollection';
import VolumeType from '../model/VolumeType';
import VolumeTypesCollection from '../model/VolumeTypesCollection';
import VolumesCollection from '../model/VolumesCollection';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new Authentication
     * Creates a Authentication object
     * @param {module:model/Authentication} authentication Authentication attributes to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createAuthenticationWithHttpInfo(authentication) {
      let postBody = authentication;

      // verify the required parameter 'authentication' is set
      if (authentication === undefined || authentication === null) {
        throw new Error("Missing the required parameter 'authentication' when calling createAuthentication");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/authentications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new Authentication
     * Creates a Authentication object
     * @param {module:model/Authentication} authentication Authentication attributes to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createAuthentication(authentication) {
      return this.createAuthenticationWithHttpInfo(authentication)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Endpoint
     * Creates a Endpoint object
     * @param {module:model/Endpoint} endpoint Endpoint attributes to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createEndpointWithHttpInfo(endpoint) {
      let postBody = endpoint;

      // verify the required parameter 'endpoint' is set
      if (endpoint === undefined || endpoint === null) {
        throw new Error("Missing the required parameter 'endpoint' when calling createEndpoint");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/endpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new Endpoint
     * Creates a Endpoint object
     * @param {module:model/Endpoint} endpoint Endpoint attributes to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createEndpoint(endpoint) {
      return this.createEndpointWithHttpInfo(endpoint)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Source
     * Creates a Source object
     * @param {module:model/Source} source Source attributes to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createSourceWithHttpInfo(source) {
      let postBody = source;

      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling createSource");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/sources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new Source
     * Creates a Source object
     * @param {module:model/Source} source Source attributes to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createSource(source) {
      return this.createSourceWithHttpInfo(source)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new SourceType
     * Creates a SourceType object
     * @param {module:model/SourceType} sourceType SourceType attributes to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createSourceTypeWithHttpInfo(sourceType) {
      let postBody = sourceType;

      // verify the required parameter 'sourceType' is set
      if (sourceType === undefined || sourceType === null) {
        throw new Error("Missing the required parameter 'sourceType' when calling createSourceType");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/source_types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new SourceType
     * Creates a SourceType object
     * @param {module:model/SourceType} sourceType SourceType attributes to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createSourceType(sourceType) {
      return this.createSourceTypeWithHttpInfo(sourceType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing Authentication
     * Deletes a Authentication object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAuthenticationWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAuthentication");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/authentications/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an existing Authentication
     * Deletes a Authentication object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAuthentication(id) {
      return this.deleteAuthenticationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing Endpoint
     * Deletes a Endpoint object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteEndpointWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEndpoint");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an existing Endpoint
     * Deletes a Endpoint object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteEndpoint(id) {
      return this.deleteEndpointWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing Source
     * Deletes a Source object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSourceWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSource");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sources/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an existing Source
     * Deletes a Source object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSource(id) {
      return this.deleteSourceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Authentications
     * Returns an array of Authentication objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthenticationsCollection} and HTTP response
     */
    listAuthenticationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticationsCollection;

      return this.apiClient.callApi(
        '/authentications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Authentications
     * Returns an array of Authentication objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthenticationsCollection}
     */
    listAuthentications(opts) {
      return this.listAuthenticationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Containers for ContainerGroup
     * Returns an array of Container objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainersCollection} and HTTP response
     */
    listContainerGroupContainersWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listContainerGroupContainers");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainersCollection;

      return this.apiClient.callApi(
        '/container_groups/{id}/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Containers for ContainerGroup
     * Returns an array of Container objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainersCollection}
     */
    listContainerGroupContainers(id, opts) {
      return this.listContainerGroupContainersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerGroups
     * Returns an array of ContainerGroup objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerGroupsCollection} and HTTP response
     */
    listContainerGroupsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerGroupsCollection;

      return this.apiClient.callApi(
        '/container_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerGroups
     * Returns an array of ContainerGroup objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerGroupsCollection}
     */
    listContainerGroups(opts) {
      return this.listContainerGroupsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerImages
     * Returns an array of ContainerImage objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerImagesCollection} and HTTP response
     */
    listContainerImagesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerImagesCollection;

      return this.apiClient.callApi(
        '/container_images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerImages
     * Returns an array of ContainerImage objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerImagesCollection}
     */
    listContainerImages(opts) {
      return this.listContainerImagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerGroups for ContainerNode
     * Returns an array of ContainerGroup objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerGroupsCollection} and HTTP response
     */
    listContainerNodeContainerGroupsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listContainerNodeContainerGroups");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerGroupsCollection;

      return this.apiClient.callApi(
        '/container_nodes/{id}/container_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerGroups for ContainerNode
     * Returns an array of ContainerGroup objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerGroupsCollection}
     */
    listContainerNodeContainerGroups(id, opts) {
      return this.listContainerNodeContainerGroupsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerNodes
     * Returns an array of ContainerNode objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerNodesCollection} and HTTP response
     */
    listContainerNodesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerNodesCollection;

      return this.apiClient.callApi(
        '/container_nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerNodes
     * Returns an array of ContainerNode objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerNodesCollection}
     */
    listContainerNodes(opts) {
      return this.listContainerNodesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerGroups for ContainerProject
     * Returns an array of ContainerGroup objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerGroupsCollection} and HTTP response
     */
    listContainerProjectContainerGroupsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listContainerProjectContainerGroups");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerGroupsCollection;

      return this.apiClient.callApi(
        '/container_projects/{id}/container_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerGroups for ContainerProject
     * Returns an array of ContainerGroup objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerGroupsCollection}
     */
    listContainerProjectContainerGroups(id, opts) {
      return this.listContainerProjectContainerGroupsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerTemplates for ContainerProject
     * Returns an array of ContainerTemplate objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerTemplatesCollection} and HTTP response
     */
    listContainerProjectContainerTemplatesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listContainerProjectContainerTemplates");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerTemplatesCollection;

      return this.apiClient.callApi(
        '/container_projects/{id}/container_templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerTemplates for ContainerProject
     * Returns an array of ContainerTemplate objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerTemplatesCollection}
     */
    listContainerProjectContainerTemplates(id, opts) {
      return this.listContainerProjectContainerTemplatesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerProjects
     * Returns an array of ContainerProject objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerProjectsCollection} and HTTP response
     */
    listContainerProjectsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerProjectsCollection;

      return this.apiClient.callApi(
        '/container_projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerProjects
     * Returns an array of ContainerProject objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerProjectsCollection}
     */
    listContainerProjects(opts) {
      return this.listContainerProjectsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerTemplates
     * Returns an array of ContainerTemplate objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerTemplatesCollection} and HTTP response
     */
    listContainerTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerTemplatesCollection;

      return this.apiClient.callApi(
        '/container_templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerTemplates
     * Returns an array of ContainerTemplate objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerTemplatesCollection}
     */
    listContainerTemplates(opts) {
      return this.listContainerTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Containers
     * Returns an array of Container objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainersCollection} and HTTP response
     */
    listContainersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainersCollection;

      return this.apiClient.callApi(
        '/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Containers
     * Returns an array of Container objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainersCollection}
     */
    listContainers(opts) {
      return this.listContainersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Endpoints
     * Returns an array of Endpoint objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EndpointsCollection} and HTTP response
     */
    listEndpointsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointsCollection;

      return this.apiClient.callApi(
        '/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Endpoints
     * Returns an array of Endpoint objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EndpointsCollection}
     */
    listEndpoints(opts) {
      return this.listEndpointsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Flavors
     * Returns an array of Flavor objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FlavorsCollection} and HTTP response
     */
    listFlavorsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FlavorsCollection;

      return this.apiClient.callApi(
        '/flavors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Flavors
     * Returns an array of Flavor objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FlavorsCollection}
     */
    listFlavors(opts) {
      return this.listFlavorsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List OrchestrationStacks
     * Returns an array of OrchestrationStack objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrchestrationStacksCollection} and HTTP response
     */
    listOrchestrationStacksWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrchestrationStacksCollection;

      return this.apiClient.callApi(
        '/orchestration_stacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List OrchestrationStacks
     * Returns an array of OrchestrationStack objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrchestrationStacksCollection}
     */
    listOrchestrationStacks(opts) {
      return this.listOrchestrationStacksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceInstances
     * Returns an array of ServiceInstance objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceInstancesCollection} and HTTP response
     */
    listServiceInstancesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceInstancesCollection;

      return this.apiClient.callApi(
        '/service_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceInstances
     * Returns an array of ServiceInstance objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceInstancesCollection}
     */
    listServiceInstances(opts) {
      return this.listServiceInstancesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceOfferingIcons
     * Returns an array of ServiceOfferingIcon objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ServiceOfferingIcon>} and HTTP response
     */
    listServiceOfferingIconsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceOfferingIcon];

      return this.apiClient.callApi(
        '/service_offering_icons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceOfferingIcons
     * Returns an array of ServiceOfferingIcon objects
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ServiceOfferingIcon>}
     */
    listServiceOfferingIcons() {
      return this.listServiceOfferingIconsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceInstances for ServiceOffering
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceInstancesCollection} and HTTP response
     */
    listServiceOfferingServiceInstancesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listServiceOfferingServiceInstances");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceInstancesCollection;

      return this.apiClient.callApi(
        '/service_offerings/{id}/service_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceInstances for ServiceOffering
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceInstancesCollection}
     */
    listServiceOfferingServiceInstances(id, opts) {
      return this.listServiceOfferingServiceInstancesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServicePlans for ServiceOffering
     * Returns an array of ServicePlan objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServicePlansCollection} and HTTP response
     */
    listServiceOfferingServicePlansWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listServiceOfferingServicePlans");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicePlansCollection;

      return this.apiClient.callApi(
        '/service_offerings/{id}/service_plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServicePlans for ServiceOffering
     * Returns an array of ServicePlan objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServicePlansCollection}
     */
    listServiceOfferingServicePlans(id, opts) {
      return this.listServiceOfferingServicePlansWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceOfferings
     * Returns an array of ServiceOffering objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceOfferingsCollection} and HTTP response
     */
    listServiceOfferingsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceOfferingsCollection;

      return this.apiClient.callApi(
        '/service_offerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceOfferings
     * Returns an array of ServiceOffering objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceOfferingsCollection}
     */
    listServiceOfferings(opts) {
      return this.listServiceOfferingsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceInstances for ServicePlan
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceInstancesCollection} and HTTP response
     */
    listServicePlanServiceInstancesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listServicePlanServiceInstances");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceInstancesCollection;

      return this.apiClient.callApi(
        '/service_plans/{id}/service_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceInstances for ServicePlan
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceInstancesCollection}
     */
    listServicePlanServiceInstances(id, opts) {
      return this.listServicePlanServiceInstancesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServicePlans
     * Returns an array of ServicePlan objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServicePlansCollection} and HTTP response
     */
    listServicePlansWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicePlansCollection;

      return this.apiClient.callApi(
        '/service_plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServicePlans
     * Returns an array of ServicePlan objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServicePlansCollection}
     */
    listServicePlans(opts) {
      return this.listServicePlansWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerGroups for Source
     * Returns an array of ContainerGroup objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerGroupsCollection} and HTTP response
     */
    listSourceContainerGroupsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceContainerGroups");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerGroupsCollection;

      return this.apiClient.callApi(
        '/sources/{id}/container_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerGroups for Source
     * Returns an array of ContainerGroup objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerGroupsCollection}
     */
    listSourceContainerGroups(id, opts) {
      return this.listSourceContainerGroupsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerImages for Source
     * Returns an array of ContainerImage objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerImagesCollection} and HTTP response
     */
    listSourceContainerImagesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceContainerImages");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerImagesCollection;

      return this.apiClient.callApi(
        '/sources/{id}/container_images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerImages for Source
     * Returns an array of ContainerImage objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerImagesCollection}
     */
    listSourceContainerImages(id, opts) {
      return this.listSourceContainerImagesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerNodes for Source
     * Returns an array of ContainerNode objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerNodesCollection} and HTTP response
     */
    listSourceContainerNodesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceContainerNodes");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerNodesCollection;

      return this.apiClient.callApi(
        '/sources/{id}/container_nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerNodes for Source
     * Returns an array of ContainerNode objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerNodesCollection}
     */
    listSourceContainerNodes(id, opts) {
      return this.listSourceContainerNodesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerProjects for Source
     * Returns an array of ContainerProject objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerProjectsCollection} and HTTP response
     */
    listSourceContainerProjectsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceContainerProjects");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerProjectsCollection;

      return this.apiClient.callApi(
        '/sources/{id}/container_projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerProjects for Source
     * Returns an array of ContainerProject objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerProjectsCollection}
     */
    listSourceContainerProjects(id, opts) {
      return this.listSourceContainerProjectsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ContainerTemplates for Source
     * Returns an array of ContainerTemplate objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerTemplatesCollection} and HTTP response
     */
    listSourceContainerTemplatesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceContainerTemplates");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerTemplatesCollection;

      return this.apiClient.callApi(
        '/sources/{id}/container_templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ContainerTemplates for Source
     * Returns an array of ContainerTemplate objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerTemplatesCollection}
     */
    listSourceContainerTemplates(id, opts) {
      return this.listSourceContainerTemplatesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Containers for Source
     * Returns an array of Container objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainersCollection} and HTTP response
     */
    listSourceContainersWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceContainers");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainersCollection;

      return this.apiClient.callApi(
        '/sources/{id}/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Containers for Source
     * Returns an array of Container objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainersCollection}
     */
    listSourceContainers(id, opts) {
      return this.listSourceContainersWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Endpoints for Source
     * Returns an array of Endpoint objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EndpointsCollection} and HTTP response
     */
    listSourceEndpointsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceEndpoints");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointsCollection;

      return this.apiClient.callApi(
        '/sources/{id}/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Endpoints for Source
     * Returns an array of Endpoint objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EndpointsCollection}
     */
    listSourceEndpoints(id, opts) {
      return this.listSourceEndpointsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List OrchestrationStacks for Source
     * Returns an array of OrchestrationStack objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrchestrationStacksCollection} and HTTP response
     */
    listSourceOrchestrationStacksWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceOrchestrationStacks");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrchestrationStacksCollection;

      return this.apiClient.callApi(
        '/sources/{id}/orchestration_stacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List OrchestrationStacks for Source
     * Returns an array of OrchestrationStack objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrchestrationStacksCollection}
     */
    listSourceOrchestrationStacks(id, opts) {
      return this.listSourceOrchestrationStacksWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceInstances for Source
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceInstancesCollection} and HTTP response
     */
    listSourceServiceInstancesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceServiceInstances");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceInstancesCollection;

      return this.apiClient.callApi(
        '/sources/{id}/service_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceInstances for Source
     * Returns an array of ServiceInstance objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceInstancesCollection}
     */
    listSourceServiceInstances(id, opts) {
      return this.listSourceServiceInstancesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServiceOfferings for Source
     * Returns an array of ServiceOffering objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceOfferingsCollection} and HTTP response
     */
    listSourceServiceOfferingsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceServiceOfferings");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceOfferingsCollection;

      return this.apiClient.callApi(
        '/sources/{id}/service_offerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServiceOfferings for Source
     * Returns an array of ServiceOffering objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceOfferingsCollection}
     */
    listSourceServiceOfferings(id, opts) {
      return this.listSourceServiceOfferingsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List ServicePlans for Source
     * Returns an array of ServicePlan objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServicePlansCollection} and HTTP response
     */
    listSourceServicePlansWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceServicePlans");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicePlansCollection;

      return this.apiClient.callApi(
        '/sources/{id}/service_plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List ServicePlans for Source
     * Returns an array of ServicePlan objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServicePlansCollection}
     */
    listSourceServicePlans(id, opts) {
      return this.listSourceServicePlansWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Sources for SourceType
     * Returns an array of Source objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourcesCollection} and HTTP response
     */
    listSourceTypeSourcesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceTypeSources");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourcesCollection;

      return this.apiClient.callApi(
        '/source_types/{id}/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Sources for SourceType
     * Returns an array of Source objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourcesCollection}
     */
    listSourceTypeSources(id, opts) {
      return this.listSourceTypeSourcesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List SourceTypes
     * Returns an array of SourceType objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceTypesCollection} and HTTP response
     */
    listSourceTypesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceTypesCollection;

      return this.apiClient.callApi(
        '/source_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List SourceTypes
     * Returns an array of SourceType objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourceTypesCollection}
     */
    listSourceTypes(opts) {
      return this.listSourceTypesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Vms for Source
     * Returns an array of Vm objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VmsCollection} and HTTP response
     */
    listSourceVmsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceVms");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VmsCollection;

      return this.apiClient.callApi(
        '/sources/{id}/vms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Vms for Source
     * Returns an array of Vm objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VmsCollection}
     */
    listSourceVms(id, opts) {
      return this.listSourceVmsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List VolumeTypes for Source
     * Returns an array of VolumeType objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumeTypesCollection} and HTTP response
     */
    listSourceVolumeTypesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceVolumeTypes");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolumeTypesCollection;

      return this.apiClient.callApi(
        '/sources/{id}/volume_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List VolumeTypes for Source
     * Returns an array of VolumeType objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VolumeTypesCollection}
     */
    listSourceVolumeTypes(id, opts) {
      return this.listSourceVolumeTypesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Volumes for Source
     * Returns an array of Volume objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumesCollection} and HTTP response
     */
    listSourceVolumesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSourceVolumes");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolumesCollection;

      return this.apiClient.callApi(
        '/sources/{id}/volumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Volumes for Source
     * Returns an array of Volume objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VolumesCollection}
     */
    listSourceVolumes(id, opts) {
      return this.listSourceVolumesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Sources
     * Returns an array of Source objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourcesCollection} and HTTP response
     */
    listSourcesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourcesCollection;

      return this.apiClient.callApi(
        '/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Sources
     * Returns an array of Source objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourcesCollection}
     */
    listSources(opts) {
      return this.listSourcesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Tags
     * Returns an array of Tag objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TagsCollection} and HTTP response
     */
    listTagsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagsCollection;

      return this.apiClient.callApi(
        '/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Tags
     * Returns an array of Tag objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagsCollection}
     */
    listTags(opts) {
      return this.listTagsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Tasks
     * Returns an array of Task objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TasksCollection} and HTTP response
     */
    listTasksWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TasksCollection;

      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Tasks
     * Returns an array of Task objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TasksCollection}
     */
    listTasks(opts) {
      return this.listTasksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List VolumeAttachments for Vm
     * Returns an array of VolumeAttachment objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumeAttachmentsCollection} and HTTP response
     */
    listVmVolumeAttachmentsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listVmVolumeAttachments");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolumeAttachmentsCollection;

      return this.apiClient.callApi(
        '/vms/{id}/volume_attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List VolumeAttachments for Vm
     * Returns an array of VolumeAttachment objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VolumeAttachmentsCollection}
     */
    listVmVolumeAttachments(id, opts) {
      return this.listVmVolumeAttachmentsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Volumes for Vm
     * Returns an array of Volume objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumesCollection} and HTTP response
     */
    listVmVolumesWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listVmVolumes");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolumesCollection;

      return this.apiClient.callApi(
        '/vms/{id}/volumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Volumes for Vm
     * Returns an array of Volume objects
     * @param {String} id ID of the resource
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VolumesCollection}
     */
    listVmVolumes(id, opts) {
      return this.listVmVolumesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Vms
     * Returns an array of Vm objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VmsCollection} and HTTP response
     */
    listVmsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VmsCollection;

      return this.apiClient.callApi(
        '/vms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Vms
     * Returns an array of Vm objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VmsCollection}
     */
    listVms(opts) {
      return this.listVmsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List VolumeAttachments
     * Returns an array of VolumeAttachment objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumeAttachmentsCollection} and HTTP response
     */
    listVolumeAttachmentsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolumeAttachmentsCollection;

      return this.apiClient.callApi(
        '/volume_attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List VolumeAttachments
     * Returns an array of VolumeAttachment objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VolumeAttachmentsCollection}
     */
    listVolumeAttachments(opts) {
      return this.listVolumeAttachmentsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List VolumeTypes
     * Returns an array of VolumeType objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumeTypesCollection} and HTTP response
     */
    listVolumeTypesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolumeTypesCollection;

      return this.apiClient.callApi(
        '/volume_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List VolumeTypes
     * Returns an array of VolumeType objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VolumeTypesCollection}
     */
    listVolumeTypes(opts) {
      return this.listVolumeTypesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Volumes
     * Returns an array of Volume objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumesCollection} and HTTP response
     */
    listVolumesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolumesCollection;

      return this.apiClient.callApi(
        '/volumes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List Volumes
     * Returns an array of Volume objects
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return per page. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VolumesCollection}
     */
    listVolumes(opts) {
      return this.listVolumesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Order an existing ServicePlan
     * Returns a Task id
     * @param {String} id ID of the resource
     * @param {module:model/OrderParameters} orderParameters Order parameters defining the service and provider control
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    orderServicePlanWithHttpInfo(id, orderParameters) {
      let postBody = orderParameters;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderServicePlan");
      }

      // verify the required parameter 'orderParameters' is set
      if (orderParameters === undefined || orderParameters === null) {
        throw new Error("Missing the required parameter 'orderParameters' when calling orderServicePlan");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/service_plans/{id}/order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Order an existing ServicePlan
     * Returns a Task id
     * @param {String} id ID of the resource
     * @param {module:model/OrderParameters} orderParameters Order parameters defining the service and provider control
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    orderServicePlan(id, orderParameters) {
      return this.orderServicePlanWithHttpInfo(id, orderParameters)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Authentication
     * Returns a Authentication object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Authentication} and HTTP response
     */
    showAuthenticationWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showAuthentication");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Authentication;

      return this.apiClient.callApi(
        '/authentications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Authentication
     * Returns a Authentication object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Authentication}
     */
    showAuthentication(id) {
      return this.showAuthenticationWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Container
     * Returns a Container object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Container} and HTTP response
     */
    showContainerWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showContainer");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Container;

      return this.apiClient.callApi(
        '/containers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Container
     * Returns a Container object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Container}
     */
    showContainer(id) {
      return this.showContainerWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ContainerGroup
     * Returns a ContainerGroup object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerGroup} and HTTP response
     */
    showContainerGroupWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showContainerGroup");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerGroup;

      return this.apiClient.callApi(
        '/container_groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ContainerGroup
     * Returns a ContainerGroup object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerGroup}
     */
    showContainerGroup(id) {
      return this.showContainerGroupWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ContainerImage
     * Returns a ContainerImage object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerImage} and HTTP response
     */
    showContainerImageWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showContainerImage");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerImage;

      return this.apiClient.callApi(
        '/container_images/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ContainerImage
     * Returns a ContainerImage object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerImage}
     */
    showContainerImage(id) {
      return this.showContainerImageWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ContainerNode
     * Returns a ContainerNode object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerNode} and HTTP response
     */
    showContainerNodeWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showContainerNode");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerNode;

      return this.apiClient.callApi(
        '/container_nodes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ContainerNode
     * Returns a ContainerNode object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerNode}
     */
    showContainerNode(id) {
      return this.showContainerNodeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ContainerProject
     * Returns a ContainerProject object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerProject} and HTTP response
     */
    showContainerProjectWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showContainerProject");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerProject;

      return this.apiClient.callApi(
        '/container_projects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ContainerProject
     * Returns a ContainerProject object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerProject}
     */
    showContainerProject(id) {
      return this.showContainerProjectWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ContainerTemplate
     * Returns a ContainerTemplate object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContainerTemplate} and HTTP response
     */
    showContainerTemplateWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showContainerTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContainerTemplate;

      return this.apiClient.callApi(
        '/container_templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ContainerTemplate
     * Returns a ContainerTemplate object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContainerTemplate}
     */
    showContainerTemplate(id) {
      return this.showContainerTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Endpoint
     * Returns a Endpoint object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Endpoint} and HTTP response
     */
    showEndpointWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showEndpoint");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Endpoint;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Endpoint
     * Returns a Endpoint object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Endpoint}
     */
    showEndpoint(id) {
      return this.showEndpointWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Flavor
     * Returns a Flavor object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Flavor} and HTTP response
     */
    showFlavorWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showFlavor");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Flavor;

      return this.apiClient.callApi(
        '/flavors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Flavor
     * Returns a Flavor object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Flavor}
     */
    showFlavor(id) {
      return this.showFlavorWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing OrchestrationStack
     * Returns a OrchestrationStack object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrchestrationStack} and HTTP response
     */
    showOrchestrationStackWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showOrchestrationStack");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrchestrationStack;

      return this.apiClient.callApi(
        '/orchestration_stacks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing OrchestrationStack
     * Returns a OrchestrationStack object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrchestrationStack}
     */
    showOrchestrationStack(id) {
      return this.showOrchestrationStackWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ServiceInstance
     * Returns a ServiceInstance object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceInstance} and HTTP response
     */
    showServiceInstanceWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showServiceInstance");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceInstance;

      return this.apiClient.callApi(
        '/service_instances/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ServiceInstance
     * Returns a ServiceInstance object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceInstance}
     */
    showServiceInstance(id) {
      return this.showServiceInstanceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ServiceOffering
     * Returns a ServiceOffering object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceOffering} and HTTP response
     */
    showServiceOfferingWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showServiceOffering");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceOffering;

      return this.apiClient.callApi(
        '/service_offerings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ServiceOffering
     * Returns a ServiceOffering object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceOffering}
     */
    showServiceOffering(id) {
      return this.showServiceOfferingWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ServiceOfferingIcon
     * Returns a ServiceOfferingIcon object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceOfferingIcon} and HTTP response
     */
    showServiceOfferingIconWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showServiceOfferingIcon");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceOfferingIcon;

      return this.apiClient.callApi(
        '/service_offering_icons/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ServiceOfferingIcon
     * Returns a ServiceOfferingIcon object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceOfferingIcon}
     */
    showServiceOfferingIcon(id) {
      return this.showServiceOfferingIconWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing ServicePlan
     * Returns a ServicePlan object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServicePlan} and HTTP response
     */
    showServicePlanWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showServicePlan");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicePlan;

      return this.apiClient.callApi(
        '/service_plans/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing ServicePlan
     * Returns a ServicePlan object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServicePlan}
     */
    showServicePlan(id) {
      return this.showServicePlanWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Source
     * Returns a Source object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Source} and HTTP response
     */
    showSourceWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showSource");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Source;

      return this.apiClient.callApi(
        '/sources/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Source
     * Returns a Source object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Source}
     */
    showSource(id) {
      return this.showSourceWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing SourceType
     * Returns a SourceType object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceType} and HTTP response
     */
    showSourceTypeWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showSourceType");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceType;

      return this.apiClient.callApi(
        '/source_types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing SourceType
     * Returns a SourceType object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourceType}
     */
    showSourceType(id) {
      return this.showSourceTypeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Tag
     * Returns a Tag object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Tag} and HTTP response
     */
    showTagWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showTag");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;

      return this.apiClient.callApi(
        '/tags/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Tag
     * Returns a Tag object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Tag}
     */
    showTag(id) {
      return this.showTagWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Task
     * Returns a Task object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Task} and HTTP response
     */
    showTaskWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showTask");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Task;

      return this.apiClient.callApi(
        '/tasks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Task
     * Returns a Task object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Task}
     */
    showTask(id) {
      return this.showTaskWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Vm
     * Returns a Vm object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
    showVmWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showVm");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vm;

      return this.apiClient.callApi(
        '/vms/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Vm
     * Returns a Vm object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
    showVm(id) {
      return this.showVmWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing Volume
     * Returns a Volume object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Volume} and HTTP response
     */
    showVolumeWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showVolume");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Volume;

      return this.apiClient.callApi(
        '/volumes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing Volume
     * Returns a Volume object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Volume}
     */
    showVolume(id) {
      return this.showVolumeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing VolumeAttachment
     * Returns a VolumeAttachment object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumeAttachment} and HTTP response
     */
    showVolumeAttachmentWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showVolumeAttachment");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolumeAttachment;

      return this.apiClient.callApi(
        '/volume_attachments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing VolumeAttachment
     * Returns a VolumeAttachment object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VolumeAttachment}
     */
    showVolumeAttachment(id) {
      return this.showVolumeAttachmentWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show an existing VolumeType
     * Returns a VolumeType object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumeType} and HTTP response
     */
    showVolumeTypeWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showVolumeType");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolumeType;

      return this.apiClient.callApi(
        '/volume_types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show an existing VolumeType
     * Returns a VolumeType object
     * @param {String} id ID of the resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VolumeType}
     */
    showVolumeType(id) {
      return this.showVolumeTypeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing Authentication
     * Updates a Authentication object
     * @param {String} id ID of the resource
     * @param {module:model/Authentication} authentication Authentication attributes to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateAuthenticationWithHttpInfo(id, authentication) {
      let postBody = authentication;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAuthentication");
      }

      // verify the required parameter 'authentication' is set
      if (authentication === undefined || authentication === null) {
        throw new Error("Missing the required parameter 'authentication' when calling updateAuthentication");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/authentications/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing Authentication
     * Updates a Authentication object
     * @param {String} id ID of the resource
     * @param {module:model/Authentication} authentication Authentication attributes to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateAuthentication(id, authentication) {
      return this.updateAuthenticationWithHttpInfo(id, authentication)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing Endpoint
     * Updates a Endpoint object
     * @param {String} id ID of the resource
     * @param {module:model/Endpoint} endpoint Endpoint attributes to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateEndpointWithHttpInfo(id, endpoint) {
      let postBody = endpoint;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateEndpoint");
      }

      // verify the required parameter 'endpoint' is set
      if (endpoint === undefined || endpoint === null) {
        throw new Error("Missing the required parameter 'endpoint' when calling updateEndpoint");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing Endpoint
     * Updates a Endpoint object
     * @param {String} id ID of the resource
     * @param {module:model/Endpoint} endpoint Endpoint attributes to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateEndpoint(id, endpoint) {
      return this.updateEndpointWithHttpInfo(id, endpoint)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing Source
     * Updates a Source object
     * @param {String} id ID of the resource
     * @param {module:model/Source} source Source attributes to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateSourceWithHttpInfo(id, source) {
      let postBody = source;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSource");
      }

      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling updateSource");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['UserSecurity'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/sources/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing Source
     * Updates a Source object
     * @param {String} id ID of the resource
     * @param {module:model/Source} source Source attributes to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateSource(id, source) {
      return this.updateSourceWithHttpInfo(id, source)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
