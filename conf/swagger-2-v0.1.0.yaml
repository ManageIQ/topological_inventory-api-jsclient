swagger: '2.0'
info:
  description: Topological Inventory
  version: 0.1.0
  title: Topological Inventory
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
securityDefinitions:
  UserSecurity:
    type: basic
security:
- UserSecurity: []
paths:
  "/authentications":
    get:
      summary: List Authentications
      operationId: listAuthentications
      description: Returns an array of Authentication objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: Authentications collection
          schema:
            "$ref": "#/definitions/AuthenticationsCollection"
    post:
      summary: Create a new Authentication
      operationId: createAuthentication
      description: Creates a Authentication object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: body
        in: body
        description: Authentication attributes to create
        required: true
        schema:
          "$ref": "#/definitions/Authentication"
      responses:
        201:
          description: Authentication creation successful
          schema:
            type: object
            items:
              "$ref": "#/definitions/Authentication"
  "/authentications/{id}":
    get:
      summary: Show an existing Authentication
      operationId: showAuthentication
      description: Returns a Authentication object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Authentication info
          schema:
            "$ref": "#/definitions/Authentication"
        404:
          description: Not found
    patch:
      summary: Update an existing Authentication
      operationId: updateAuthentication
      description: Updates a Authentication object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      - name: body
        in: body
        description: Authentication attributes to update
        required: true
        schema:
          "$ref": "#/definitions/Authentication"
      responses:
        204:
          description: Updated, no content
        404:
          description: Not found
    delete:
      summary: Delete an existing Authentication
      operationId: deleteAuthentication
      description: Deletes a Authentication object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        204:
          description: Authentication deleted
        404:
          description: Not found
  "/container_groups":
    get:
      summary: List ContainerGroups
      operationId: listContainerGroups
      description: Returns an array of ContainerGroup objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: ContainerGroups collection
          schema:
            "$ref": "#/definitions/ContainerGroupsCollection"
  "/container_groups/{id}":
    get:
      summary: Show an existing ContainerGroup
      operationId: showContainerGroup
      description: Returns a ContainerGroup object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ContainerGroup info
          schema:
            "$ref": "#/definitions/ContainerGroup"
        404:
          description: Not found
  "/container_groups/{id}/containers":
    get:
      summary: List Containers for ContainerGroup
      operationId: listContainerGroupContainers
      description: Returns an array of Container objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: Containers collection
          schema:
            "$ref": "#/definitions/ContainersCollection"
  "/container_images":
    get:
      summary: List ContainerImages
      operationId: listContainerImages
      description: Returns an array of ContainerImage objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: ContainerImages collection
          schema:
            "$ref": "#/definitions/ContainerImagesCollection"
  "/container_images/{id}":
    get:
      summary: Show an existing ContainerImage
      operationId: showContainerImage
      description: Returns a ContainerImage object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ContainerImage info
          schema:
            "$ref": "#/definitions/ContainerImage"
        404:
          description: Not found
  "/container_nodes":
    get:
      summary: List ContainerNodes
      operationId: listContainerNodes
      description: Returns an array of ContainerNode objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: ContainerNodes collection
          schema:
            "$ref": "#/definitions/ContainerNodesCollection"
  "/container_nodes/{id}":
    get:
      summary: Show an existing ContainerNode
      operationId: showContainerNode
      description: Returns a ContainerNode object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ContainerNode info
          schema:
            "$ref": "#/definitions/ContainerNode"
        404:
          description: Not found
  "/container_nodes/{id}/container_groups":
    get:
      summary: List ContainerGroups for ContainerNode
      operationId: listContainerNodeContainerGroups
      description: Returns an array of ContainerGroup objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ContainerGroups collection
          schema:
            "$ref": "#/definitions/ContainerGroupsCollection"
  "/container_projects":
    get:
      summary: List ContainerProjects
      operationId: listContainerProjects
      description: Returns an array of ContainerProject objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: ContainerProjects collection
          schema:
            "$ref": "#/definitions/ContainerProjectsCollection"
  "/container_projects/{id}":
    get:
      summary: Show an existing ContainerProject
      operationId: showContainerProject
      description: Returns a ContainerProject object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ContainerProject info
          schema:
            "$ref": "#/definitions/ContainerProject"
        404:
          description: Not found
  "/container_projects/{id}/container_groups":
    get:
      summary: List ContainerGroups for ContainerProject
      operationId: listContainerProjectContainerGroups
      description: Returns an array of ContainerGroup objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ContainerGroups collection
          schema:
            "$ref": "#/definitions/ContainerGroupsCollection"
  "/container_projects/{id}/container_templates":
    get:
      summary: List ContainerTemplates for ContainerProject
      operationId: listContainerProjectContainerTemplates
      description: Returns an array of ContainerTemplate objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ContainerTemplates collection
          schema:
            "$ref": "#/definitions/ContainerTemplatesCollection"
  "/container_templates":
    get:
      summary: List ContainerTemplates
      operationId: listContainerTemplates
      description: Returns an array of ContainerTemplate objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: ContainerTemplates collection
          schema:
            "$ref": "#/definitions/ContainerTemplatesCollection"
  "/container_templates/{id}":
    get:
      summary: Show an existing ContainerTemplate
      operationId: showContainerTemplate
      description: Returns a ContainerTemplate object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ContainerTemplate info
          schema:
            "$ref": "#/definitions/ContainerTemplate"
        404:
          description: Not found
  "/containers":
    get:
      summary: List Containers
      operationId: listContainers
      description: Returns an array of Container objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: Containers collection
          schema:
            "$ref": "#/definitions/ContainersCollection"
  "/containers/{id}":
    get:
      summary: Show an existing Container
      operationId: showContainer
      description: Returns a Container object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Container info
          schema:
            "$ref": "#/definitions/Container"
        404:
          description: Not found
  "/endpoints":
    get:
      summary: List Endpoints
      operationId: listEndpoints
      description: Returns an array of Endpoint objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: Endpoints collection
          schema:
            "$ref": "#/definitions/EndpointsCollection"
    post:
      summary: Create a new Endpoint
      operationId: createEndpoint
      description: Creates a Endpoint object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: body
        in: body
        description: Endpoint attributes to create
        required: true
        schema:
          "$ref": "#/definitions/Endpoint"
      responses:
        201:
          description: Endpoint creation successful
          schema:
            type: object
            items:
              "$ref": "#/definitions/Endpoint"
  "/endpoints/{id}":
    get:
      summary: Show an existing Endpoint
      operationId: showEndpoint
      description: Returns a Endpoint object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Endpoint info
          schema:
            "$ref": "#/definitions/Endpoint"
        404:
          description: Not found
    patch:
      summary: Update an existing Endpoint
      operationId: updateEndpoint
      description: Updates a Endpoint object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      - name: body
        in: body
        description: Endpoint attributes to update
        required: true
        schema:
          "$ref": "#/definitions/Endpoint"
      responses:
        204:
          description: Updated, no content
        404:
          description: Not found
    delete:
      summary: Delete an existing Endpoint
      operationId: deleteEndpoint
      description: Deletes a Endpoint object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        204:
          description: Endpoint deleted
        404:
          description: Not found
  "/flavors":
    get:
      summary: List Flavors
      operationId: listFlavors
      description: Returns an array of Flavor objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: Flavors collection
          schema:
            "$ref": "#/definitions/FlavorsCollection"
  "/flavors/{id}":
    get:
      summary: Show an existing Flavor
      operationId: showFlavor
      description: Returns a Flavor object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Flavor info
          schema:
            "$ref": "#/definitions/Flavor"
        404:
          description: Not found
  "/orchestration_stacks":
    get:
      summary: List OrchestrationStacks
      operationId: listOrchestrationStacks
      description: Returns an array of OrchestrationStack objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: OrchestrationStacks collection
          schema:
            "$ref": "#/definitions/OrchestrationStacksCollection"
  "/orchestration_stacks/{id}":
    get:
      summary: Show an existing OrchestrationStack
      operationId: showOrchestrationStack
      description: Returns a OrchestrationStack object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: OrchestrationStack info
          schema:
            "$ref": "#/definitions/OrchestrationStack"
        404:
          description: Not found
  "/service_instances":
    get:
      summary: List ServiceInstances
      operationId: listServiceInstances
      description: Returns an array of ServiceInstance objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: ServiceInstances collection
          schema:
            "$ref": "#/definitions/ServiceInstancesCollection"
  "/service_instances/{id}":
    get:
      summary: Show an existing ServiceInstance
      operationId: showServiceInstance
      description: Returns a ServiceInstance object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ServiceInstance info
          schema:
            "$ref": "#/definitions/ServiceInstance"
        404:
          description: Not found
  "/service_offerings":
    get:
      summary: List ServiceOfferings
      operationId: listServiceOfferings
      description: Returns an array of ServiceOffering objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: ServiceOfferings collection
          schema:
            "$ref": "#/definitions/ServiceOfferingsCollection"
  "/service_offerings/{id}":
    get:
      summary: Show an existing ServiceOffering
      operationId: showServiceOffering
      description: Returns a ServiceOffering object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ServiceOffering info
          schema:
            "$ref": "#/definitions/ServiceOffering"
        404:
          description: Not found
  "/service_offerings/{id}/service_instances":
    get:
      summary: List ServiceInstances for ServiceOffering
      operationId: listServiceOfferingServiceInstances
      description: Returns an array of ServiceInstance objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ServiceInstances collection
          schema:
            "$ref": "#/definitions/ServiceInstancesCollection"
  "/service_offerings/{id}/service_plans":
    get:
      summary: List ServicePlans for ServiceOffering
      operationId: listServiceOfferingServicePlans
      description: Returns an array of ServicePlan objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ServicePlans collection
          schema:
            "$ref": "#/definitions/ServicePlansCollection"
  "/service_offering_icons":
    get:
      summary: List ServiceOfferingIcons
      operationId: listServiceOfferingIcons
      description: Returns an array of ServiceOfferingIcon objects
      produces:
        - application/json
      responses:
        200:
          description: ServiceOfferingIcons array
          schema:
            type: array
            items:
              "$ref": "#/definitions/ServiceOfferingIcon"
  "/service_offering_icons/{id}":
    get:
      summary: Show an existing ServiceOfferingIcon
      operationId: showServiceOfferingIcon
      description: Returns a ServiceOfferingIcon object
      produces:
        - application/json
      parameters:
        - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ServiceOfferingIcon info
          schema:
            "$ref": "#/definitions/ServiceOfferingIcon"
        404:
          description: Not found
  "/service_plans":
    get:
      summary: List ServicePlans
      operationId: listServicePlans
      description: Returns an array of ServicePlan objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: ServicePlans collection
          schema:
            "$ref": "#/definitions/ServicePlansCollection"
  "/service_plans/{id}":
    get:
      summary: Show an existing ServicePlan
      operationId: showServicePlan
      description: Returns a ServicePlan object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: ServicePlan info
          schema:
            "$ref": "#/definitions/ServicePlan"
        404:
          description: Not found
  "/service_plans/{id}/order":
    post:
      summary: Order an existing ServicePlan
      operationId: orderServicePlan
      description: Returns a Task id
      consumes:
      - application/json
      parameters:
      - "$ref": '#/parameters/ID'
      - name: parameters
        in: body
        description: Order parameters defining the service and provider control
        required: true
        schema:
          $ref: '#/definitions/OrderParameters'
      responses:
        200:
          description: Returns a task ID for the order
          schema:
            type: object
            properties:
              task_id:
                type: string
        400:
          description: BadRequest
  "/service_plans/{id}/service_instances":
    get:
      summary: List ServiceInstances for ServicePlan
      operationId: listServicePlanServiceInstances
      description: Returns an array of ServiceInstance objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ServiceInstances collection
          schema:
            "$ref": "#/definitions/ServiceInstancesCollection"
  "/source_types":
    get:
      summary: List SourceTypes
      operationId: listSourceTypes
      description: Returns an array of SourceType objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: SourceTypes collection
          schema:
            "$ref": "#/definitions/SourceTypesCollection"
    post:
      summary: Create a new SourceType
      operationId: createSourceType
      description: Creates a SourceType object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: body
        in: body
        description: SourceType attributes to create
        required: true
        schema:
          "$ref": "#/definitions/SourceType"
      responses:
        201:
          description: SourceType creation successful
          schema:
            type: object
            items:
              "$ref": "#/definitions/SourceType"
  "/source_types/{id}":
    get:
      summary: Show an existing SourceType
      operationId: showSourceType
      description: Returns a SourceType object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: SourceType info
          schema:
            "$ref": "#/definitions/SourceType"
        404:
          description: Not found
  "/source_types/{id}/sources":
    get:
      summary: List Sources for SourceType
      operationId: listSourceTypeSources
      description: Returns an array of Source objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: Sources collection
          schema:
            "$ref": "#/definitions/SourcesCollection"
  "/sources":
    get:
      summary: List Sources
      operationId: listSources
      description: Returns an array of Source objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: Sources collection
          schema:
            "$ref": "#/definitions/SourcesCollection"
    post:
      summary: Create a new Source
      operationId: createSource
      description: Creates a Source object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - name: body
        in: body
        description: Source attributes to create
        required: true
        schema:
          "$ref": "#/definitions/Source"
      responses:
        201:
          description: Source creation successful
          schema:
            type: object
            items:
              "$ref": "#/definitions/Source"
  "/sources/{id}":
    get:
      summary: Show an existing Source
      operationId: showSource
      description: Returns a Source object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Source info
          schema:
            "$ref": "#/definitions/Source"
        404:
          description: Not found
    patch:
      summary: Update an existing Source
      operationId: updateSource
      description: Updates a Source object
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      - name: body
        in: body
        description: Source attributes to update
        required: true
        schema:
          "$ref": "#/definitions/Source"
      responses:
        204:
          description: Updated, no content
        404:
          description: Not found
    delete:
      summary: Delete an existing Source
      operationId: deleteSource
      description: Deletes a Source object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        204:
          description: Source deleted
        404:
          description: Not found
  "/sources/{id}/container_groups":
    get:
      summary: List ContainerGroups for Source
      operationId: listSourceContainerGroups
      description: Returns an array of ContainerGroup objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ContainerGroups collection
          schema:
            "$ref": "#/definitions/ContainerGroupsCollection"
  "/sources/{id}/container_images":
    get:
      summary: List ContainerImages for Source
      operationId: listSourceContainerImages
      description: Returns an array of ContainerImage objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ContainerImages collection
          schema:
            "$ref": "#/definitions/ContainerImagesCollection"
  "/sources/{id}/container_nodes":
    get:
      summary: List ContainerNodes for Source
      operationId: listSourceContainerNodes
      description: Returns an array of ContainerNode objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ContainerNodes collection
          schema:
            "$ref": "#/definitions/ContainerNodesCollection"
  "/sources/{id}/container_projects":
    get:
      summary: List ContainerProjects for Source
      operationId: listSourceContainerProjects
      description: Returns an array of ContainerProject objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ContainerProjects collection
          schema:
            "$ref": "#/definitions/ContainerProjectsCollection"
  "/sources/{id}/container_templates":
    get:
      summary: List ContainerTemplates for Source
      operationId: listSourceContainerTemplates
      description: Returns an array of ContainerTemplate objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ContainerTemplates collection
          schema:
            "$ref": "#/definitions/ContainerTemplatesCollection"
  "/sources/{id}/containers":
    get:
      summary: List Containers for Source
      operationId: listSourceContainers
      description: Returns an array of Container objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: Containers collection
          schema:
            "$ref": "#/definitions/ContainersCollection"
  "/sources/{id}/endpoints":
    get:
      summary: List Endpoints for Source
      operationId: listSourceEndpoints
      description: Returns an array of Endpoint objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: Endpoints collection
          schema:
            "$ref": "#/definitions/EndpointsCollection"
  "/sources/{id}/orchestration_stacks":
    get:
      summary: List OrchestrationStacks for Source
      operationId: listSourceOrchestrationStacks
      description: Returns an array of OrchestrationStack objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: OrchestrationStacks collection
          schema:
            "$ref": "#/definitions/OrchestrationStacksCollection"
  "/sources/{id}/service_instances":
    get:
      summary: List ServiceInstances for Source
      operationId: listSourceServiceInstances
      description: Returns an array of ServiceInstance objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ServiceInstances collection
          schema:
            "$ref": "#/definitions/ServiceInstancesCollection"
  "/sources/{id}/service_offerings":
    get:
      summary: List ServiceOfferings for Source
      operationId: listSourceServiceOfferings
      description: Returns an array of ServiceOffering objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ServiceOfferings collection
          schema:
            "$ref": "#/definitions/ServiceOfferingsCollection"
  "/sources/{id}/service_plans":
    get:
      summary: List ServicePlans for Source
      operationId: listSourceServicePlans
      description: Returns an array of ServicePlan objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: ServicePlans collection
          schema:
            "$ref": "#/definitions/ServicePlansCollection"
  "/sources/{id}/vms":
    get:
      summary: List Vms for Source
      operationId: listSourceVms
      description: Returns an array of Vm objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: Vms collection
          schema:
            "$ref": "#/definitions/VmsCollection"
  "/sources/{id}/volume_types":
    get:
      summary: List VolumeTypes for Source
      operationId: listSourceVolumeTypes
      description: Returns an array of VolumeType objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: VolumeTypes collection
          schema:
            "$ref": "#/definitions/VolumeTypesCollection"
  "/sources/{id}/volumes":
    get:
      summary: List Volumes for Source
      operationId: listSourceVolumes
      description: Returns an array of Volume objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: Volumes collection
          schema:
            "$ref": "#/definitions/VolumesCollection"
  "/tags":
    get:
      summary: List Tags
      operationId: listTags
      description: Returns an array of Tag objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: Tags collection
          schema:
            "$ref": "#/definitions/TagsCollection"
  "/tags/{id}":
    get:
      summary: Show an existing Tag
      operationId: showTag
      description: Returns a Tag object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Tag info
          schema:
            "$ref": "#/definitions/Tag"
        404:
          description: Not found          
  "/tasks":
    get:
      summary: List Tasks
      operationId: listTasks
      description: Returns an array of Task objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: Tasks collection
          schema:
            "$ref": "#/definitions/TasksCollection"
  "/tasks/{id}":
    get:
      summary: Show an existing Task
      operationId: showTask
      description: Returns a Task object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Task info
          schema:
            "$ref": "#/definitions/Task"
        404:
          description: Not found
  "/vms":
    get:
      summary: List Vms
      operationId: listVms
      description: Returns an array of Vm objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: Vms collection
          schema:
            "$ref": "#/definitions/VmsCollection"
  "/vms/{id}":
    get:
      summary: Show an existing Vm
      operationId: showVm
      description: Returns a Vm object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Vm info
          schema:
            "$ref": "#/definitions/Vm"
        404:
          description: Not found
  "/vms/{id}/volume_attachments":
    get:
      summary: List VolumeAttachments for Vm
      operationId: listVmVolumeAttachments
      description: Returns an array of VolumeAttachment objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: VolumeAttachments collection
          schema:
            "$ref": "#/definitions/VolumeAttachmentsCollection"
  "/vms/{id}/volumes":
    get:
      summary: List Volumes for Vm
      operationId: listVmVolumes
      description: Returns an array of Volume objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      - "$ref": "#/parameters/ID"
      produces:
      - application/json
      responses:
        200:
          description: Volumes collection
          schema:
            "$ref": "#/definitions/VolumesCollection"
  "/volume_attachments":
    get:
      summary: List VolumeAttachments
      operationId: listVolumeAttachments
      description: Returns an array of VolumeAttachment objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: VolumeAttachments collection
          schema:
            "$ref": "#/definitions/VolumeAttachmentsCollection"
  "/volume_attachments/{id}":
    get:
      summary: Show an existing VolumeAttachment
      operationId: showVolumeAttachment
      description: Returns a VolumeAttachment object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: VolumeAttachment info
          schema:
            "$ref": "#/definitions/VolumeAttachment"
        404:
          description: Not found
  "/volume_types":
    get:
      summary: List VolumeTypes
      operationId: listVolumeTypes
      description: Returns an array of VolumeType objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: VolumeTypes collection
          schema:
            "$ref": "#/definitions/VolumeTypesCollection"
  "/volume_types/{id}":
    get:
      summary: Show an existing VolumeType
      operationId: showVolumeType
      description: Returns a VolumeType object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: VolumeType info
          schema:
            "$ref": "#/definitions/VolumeType"
        404:
          description: Not found
  "/volumes":
    get:
      summary: List Volumes
      operationId: listVolumes
      description: Returns an array of Volume objects
      parameters:
      - "$ref": "#/parameters/QueryLimit"
      - "$ref": "#/parameters/QueryOffset"
      produces:
      - application/json
      responses:
        200:
          description: Volumes collection
          schema:
            "$ref": "#/definitions/VolumesCollection"
  "/volumes/{id}":
    get:
      summary: Show an existing Volume
      operationId: showVolume
      description: Returns a Volume object
      produces:
      - application/json
      parameters:
      - "$ref": "#/parameters/ID"
      responses:
        200:
          description: Volume info
          schema:
            "$ref": "#/definitions/Volume"
        404:
          description: Not found
parameters:
  ID:
    name: id
    in: path
    description: ID of the resource
    required: true
    type: string
    pattern: "/^\\d+$/"
  QueryLimit:
    in: query
    name: limit
    type: integer
    required: false
    default: 100
    minimum: 1
    maximum: 1000
    description: The numbers of items to return per page.
  QueryOffset:
    in: query
    name: offset
    type: integer
    required: false
    default: 0
    minimum: 0
    description: The number of items to skip before starting to collect the result set.
definitions:
  Authentication:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      authtype:
        type: string
        example: openshift_default
      name:
        type: string
        example: OpenShift default
      resource_type:
        type: string
        example: Endpoint
      resource_id:
        type: string
        format: uuid
      status:
        type: string
        example: valid
      status_details:
        type: string
      username:
        type: string
        example: user@example.com
      password:
        type: string
  AuthenticationsCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/Authentication"
  CollectionLinks:
    type: object
    properties:
      first:
        type: string
      last:
        type: string
      prev:
        type: string
      next:
        type: string
  CollectionMetadata:
    type: object
    properties:
      count:
        type: integer
  Container:
    type: object
    properties:
      id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      tenant_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      name:
        type: string
        readOnly: true
        example: docker-build
      cpu_limit:
        type: number
        format: double
        readOnly: true
      cpu_request:
        type: number
        format: double
        readOnly: true
      memory_limit:
        type: integer
        readOnly: true
      memory_request:
        type: integer
        readOnly: true
      container_group_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      container_image_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      archived_at:
        type: string
        format: date-time
        readOnly: true
  ContainerGroup:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Group
        title: Name
        readOnly: true
      ipaddress:
        type: string
        example: 192.0.2.1
        title: IP Address
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      container_node_id:
        type: string
        readOnly: true
        format: uuid
      container_project_id:
        type: string
        readOnly: true
        format: uuid
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      taggings:
        type: array
        items:
          "$ref": "#/definitions/Tagging"
        readOnly: true
      archived_at:
        type: string
        format: date-time
        readOnly: true
  ContainerGroupsCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/ContainerGroup"
  ContainerImage:
    type: object
    properties:
      id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      tenant_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      name:
        type: string
        readOnly: true
        example: openshift3/postgresql-92-rhel7
      tag:
        type: string
        readOnly: true
        example: latest
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      taggings:
        type: array
        items:
          "$ref": "#/definitions/Tagging"
        readOnly: true
      archived_at:
        type: string
        format: date-time
        readOnly: true
  ContainerImagesCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/ContainerImage"
  ContainerNode:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Group
        title: Name
        readOnly: true
      cpus:
        type: integer
        example: 4
        readOnly: true
      lives_on_type:
        type: string
        readOnly: true
        example: Vm
      lives_on_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      memory:
        type: integer
        example: 4294967296
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      taggings:
        type: array
        items:
          "$ref": "#/definitions/Tagging"
        readOnly: true
      archived_at:
        type: string
        format: date-time
        readOnly: true
  ContainerNodesCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/ContainerNode"
  ContainerProject:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Project
        title: Name
      display_name:
        type: string
        example: This is a sample display name for a project
        title: Display Name
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      taggings:
        type: array
        items:
          "$ref": "#/definitions/Tagging"
        readOnly: true
      archived_at:
        type: string
        format: date-time
        readOnly: true
  ContainerProjectsCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/ContainerProject"
  ContainerTemplate:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Project
        title: Name
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      container_project_id:
        type: string
        readOnly: true
        format: uuid
      taggings:
        type: array
        items:
          "$ref": "#/definitions/Tagging"
        readOnly: true
      archived_at:
        type: string
        format: date-time
        readOnly: true
  ContainerTemplatesCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/ContainerTemplate"
  ContainersCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/Container"
  Endpoint:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      default:
        type: boolean
      host:
        type: string
        example: www.example.com
        description: URI host component
      path:
        type: string
        example: "/api/v1"
        description: URI path component
      port:
        type: integer
        minimum: 0
        maximum: 65534
        example: 80
        description: URI port component
      role:
        type: string
        example: default
      scheme:
        type: string
        example: https
        description: URI scheme component
      source_id:
        type: string
        example: '1234567890'
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
  EndpointsCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/Endpoint"
  Flavor:
    type: object
    properties:
      id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      tenant_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_ref:
        type: string
        readOnly: true
        format: uuid
      disk_size:
        type: integer
        readOnly: true
        example: 17179869184
        description: Size of the default disks in bytes
      disk_count:
        type: integer
        readOnly: true
        example: 2
        description: The number of default disks
      memory:
        type: integer
        readOnly: true
        example: 17179869184
        description: Amount of RAM in bytes
      cpus:
        type: integer
        readOnly: true
        example: 2
        description: Number of CPUs
      archived_at:
        type: string
        format: date-time
        readOnly: true
  FlavorsCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/Flavor"
  OrchestrationStack:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample OrchestrationStack
        title: Name
        readOnly: true
      description:
        type: string
        description: Description of the OrchestrationStack
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      archived_at:
        type: string
        format: date-time
        readOnly: true
  OrchestrationStacksCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/OrchestrationStack"
  OrderParameters:
    type: object
    properties:
      service_parameters:
        type: object
        description: JSON object with provisioning parameters
      provider_control_parameters:
        type: object
        description: >-
          The provider specific parameters needed to provision this service.
          This might include namespaces, special keys
  ServiceInstance:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample ServiceInstance
        title: Name
      extra:
        type: string
        description: Extra information about this object in JSON format
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      service_offering_id:
        type: string
        readOnly: true
        format: uuid
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      archived_at:
        type: string
        format: date-time
        readOnly: true
  ServiceInstancesCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/ServiceInstance"
  ServiceOffering:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Service Offering
        title: Name
        readOnly: true
      description:
        type: string
        example: This is a short description
        title: Description
        readOnly: true
      display_name:
        type: string
        example: MariaDB (Ephemeral)
        title: Display Name
        readOnly: true
      distributor:
        type: string
        example: Red Hat, Inc.
        title: Distributor
        readOnly: true
      documentation_url:
        type: string
        example: https://github.com/sclorg/mariadb-container/blob/master/10.2/root/usr/share/container-scripts/mysql/README.md
        title: Documentation URL
        readOnly: true
      long_description:
        type: string
        example: This template provides a standalone MariaDB server with a database created...
        title: Long Description
        readOnly: true
      support_url:
        type: string
        example: https://access.redhat.com
        title: Support URL
        readOnly: true
      source_ref:
        type: string
        example: object-12345_67890
        title: Source reference
        description: The native reference used by the Source to refer to this object
      extra:
        type: string
        description: Extra information about this object in JSON format
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      source_id:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      service_offering_icon_id:
        type: string
        readOnly: true
        format: uuid
      taggings:
        type: array
        items:
          "$ref": "#/definitions/Tagging"
        readOnly: true
      archived_at:
        type: string
        format: date-time
        readOnly: true
  ServiceOfferingsCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/ServiceOffering"
  ServiceOfferingIcon:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        example: "icon-mariadb"
      data:
        type: string
        description: Raw icon data
        title: Icon Data
  ServicePlan:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Provider
        title: Name
      description:
        type: string
        example: This is a sample description for a provider
        title: Description
      extra:
        type: string
        description: Extra information about this object in JSON format
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      service_offering_id:
        type: string
        readOnly: true
        format: uuid
      create_json_schema:
        type: object
        readOnly: true
      update_json_schema:
        type: object
        readOnly: true
      archived_at:
        type: string
        format: date-time
        readOnly: true
  ServicePlansCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/ServicePlan"
  Source:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      source_type_id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Provider
        title: Name
      uid:
        type: string
        readOnly: true
        title: Unique ID of the inventory source installation
      tenant_id:
        type: string
        readOnly: true
        format: uuid
  SourceType:
    type: object
    required:
    - name
    - product_name
    - vendor
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: openshift
      product_name:
        type: string
        example: OpenShift
      vendor:
        type: string
        example: Red Hat
      schema:
        type: object
  SourceTypesCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/SourceType"
  SourcesCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/Source"
  Tag:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        readOnly: true
        example: architecture
      namespace:
        type: string
        readOnly: true
        example: openshift
      description:
        type: string
        readOnly: true
        example: Instruction set architecture
  TagsCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/Tag"
  Tagging:
    type: object
    properties:
      tag_id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        readOnly: true
        example: architecture
      value:
        type: string
        readOnly: true
        example: x86_64
  Task:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Order Service Plan
        title: Name
      status:
        type: string
        example: Error
        title: Status
      state:
        type: string
        example: Running
        title: State
      context:
        type: object
        example: Extra information about this task, e.g. new inventory items created by this task
        title: Context
      completed_at:
        type: string
        format: date-time
      tenant_id:
        type: string
        readOnly: true
        format: uuid
  TasksCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/Task"
  Vm:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        format: uuid
      name:
        type: string
        example: Sample Vm
        title: Name
        readOnly: true
      description:
        type: string
        description: Description of the Vm
        readOnly: true
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      source_id:
        type: string
        readOnly: true
        format: uuid
      source_ref:
        type: string
        readOnly: true
        format: uuid
      tenant_id:
        type: string
        readOnly: true
        format: uuid
      uid_ems:
        type: string
        readOnly: true
        description: Cross-Source Unique Reference
      hostname:
        type: string
        readOnly: true
        example: localhost.localdomain
      power_state:
        type: string
        readOnly: true
        example: running
      cpus:
        type: integer
        readOnly: true
        example: 2
        description: Total number of CPUs
      memory:
        type: integer
        readOnly: true
        example: 17179869184
        description: Total RAM in bytes
      orchestration_stack_id:
        type: string
        readOnly: true
        format: uuid
      flavor_id:
        type: string
        readOnly: true
        format: uuid
      taggings:
        type: array
        items:
          "$ref": "#/definitions/Tagging"
        readOnly: true
      archived_at:
        type: string
        format: date-time
        readOnly: true
  VmsCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/Vm"
  Volume:
    type: object
    properties:
      id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      tenant_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_region_id:
        type: string
        readOnly: true
        format: uuid
      volume_type_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_ref:
        type: string
        readOnly: true
      name:
        type: string
        example: vol-00627bf31217a7bc0
      state:
        type: string
        example: in-use
      size:
        type: integer
        example: 8589934592
        description: Size of the volume in bytes
      source_created_at:
        type: string
        format: date-time
        readOnly: true
      source_deleted_at:
        type: string
        format: date-time
        readOnly: true
      archived_at:
        type: string
        format: date-time
        readOnly: true
  VolumeAttachment:
    type: object
    properties:
      id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      tenant_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      vm_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      volume_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      device:
        type: string
        readOnly: true
        example: "/dev/xvda"
      state:
        type: string
        readOnly: true
        example: attached
  VolumeAttachmentsCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/VolumeAttachment"
  VolumeType:
    type: object
    properties:
      id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      tenant_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_id:
        allOf:
        - "$ref": "#/parameters/ID"
        - readOnly: true
      source_ref:
        type: string
      name:
        type: string
        example: standard
      description:
        type: string
        example: Magnetic
      archived_at:
        type: string
        format: date-time
        readOnly: true
  VolumeTypesCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/VolumeType"
  VolumesCollection:
    type: object
    properties:
      meta:
        "$ref": "#/definitions/CollectionMetadata"
      links:
        "$ref": "#/definitions/CollectionLinks"
      data:
        type: array
        items:
          "$ref": "#/definitions/Volume"
host: virtserver.swaggerhub.com
schemes:
- https
- http
basePath: "/r/insights/platform/topological-inventory/v0.1"
